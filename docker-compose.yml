version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: datagusto-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: datagusto
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Migration service to run before backend
  backend-migrations:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app
    working_dir: /app
    command: [ "sh", "-c", "PYTHONPATH=/app alembic upgrade head" ]
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/datagusto

  # Main backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: datagusto-backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    depends_on:
      backend-migrations:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/datagusto
      JWT_SECRET_KEY: your-secret-key-here-change-in-production
      ENABLE_REGISTRATION: "true"
      PYTHONUNBUFFERED: 1
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: datagusto-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_API_VERSION: v1

volumes:
  postgres_data:
