"""first revision

Revision ID: c3706f5fffe8
Revises: 
Create Date: 2025-10-08 11:47:57.622102

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c3706f5fffe8'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('organizations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False, comment='Organization display name'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('organizations_name_idx', 'organizations', ['name'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('organization_active_status',
    sa.Column('organization_id', sa.UUID(), nullable=False, comment='Organization ID (also primary key)'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('organization_id')
    )
    op.create_table('organization_admins',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False, comment='Unique admin record ID'),
    sa.Column('organization_id', sa.UUID(), nullable=False, comment='Organization ID'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='Admin user ID'),
    sa.Column('granted_by', sa.UUID(), nullable=False, comment='User who granted admin privilege'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['granted_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('organization_id', 'user_id', name='organization_admins_unique')
    )
    op.create_index('organization_admins_org_id_idx', 'organization_admins', ['organization_id'], unique=False)
    op.create_table('organization_archives',
    sa.Column('organization_id', sa.UUID(), nullable=False, comment='Archived organization ID (also primary key)'),
    sa.Column('reason', sa.Text(), nullable=False, comment='Reason for archiving (audit trail)'),
    sa.Column('archived_by', sa.UUID(), nullable=False, comment='User who performed the archiving'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['archived_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('organization_id')
    )
    op.create_table('organization_members',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False, comment='Unique membership record ID'),
    sa.Column('organization_id', sa.UUID(), nullable=False, comment='Organization ID'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='Member user ID'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('organization_id', 'user_id', name='organization_members_unique')
    )
    op.create_index('organization_members_org_id_idx', 'organization_members', ['organization_id'], unique=False)
    op.create_index('organization_members_user_id_idx', 'organization_members', ['user_id'], unique=False)
    op.create_table('organization_owners',
    sa.Column('organization_id', sa.UUID(), nullable=False, comment='Organization ID (primary key enforces one owner)'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='Owner user ID'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('organization_id')
    )
    op.create_index('organization_owners_user_id_idx', 'organization_owners', ['user_id'], unique=False)
    op.create_table('organization_suspensions',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False, comment='Unique suspension record ID'),
    sa.Column('organization_id', sa.UUID(), nullable=False, comment='Suspended organization ID'),
    sa.Column('reason', sa.Text(), nullable=False, comment='Reason for suspension (audit trail)'),
    sa.Column('suspended_by', sa.UUID(), nullable=False, comment='User who performed the suspension'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['suspended_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('organization_suspensions_org_id_idx', 'organization_suspensions', ['organization_id'], unique=False)
    op.create_table('projects',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('organization_id', sa.UUID(), nullable=False, comment='Organization this project belongs to'),
    sa.Column('name', sa.Text(), nullable=False, comment='Project display name'),
    sa.Column('created_by', sa.UUID(), nullable=False, comment='User who created the project'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('projects_created_by_idx', 'projects', ['created_by'], unique=False)
    op.create_index('projects_name_idx', 'projects', ['name'], unique=False)
    op.create_index('projects_org_name_idx', 'projects', ['organization_id', 'name'], unique=False)
    op.create_index('projects_organization_id_idx', 'projects', ['organization_id'], unique=False)
    op.create_table('user_active_status',
    sa.Column('user_id', sa.UUID(), nullable=False, comment='User ID (also primary key)'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_table('user_archives',
    sa.Column('user_id', sa.UUID(), nullable=False, comment='Archived user ID (also primary key)'),
    sa.Column('reason', sa.Text(), nullable=False, comment='Reason for archiving (audit trail)'),
    sa.Column('archived_by', sa.UUID(), nullable=False, comment='User who performed the archiving'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['archived_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_table('user_login_password',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False, comment='Unique credential record ID'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='User ID'),
    sa.Column('email', sa.Text(), nullable=False, comment='Email address (login identifier)'),
    sa.Column('hashed_password', sa.Text(), nullable=False, comment='Bcrypt hashed password'),
    sa.Column('password_algorithm', sa.Text(), nullable=False, comment='Hash algorithm used'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('email', name='user_login_password_email_unique')
    )
    op.create_index('user_login_password_user_id_idx', 'user_login_password', ['user_id'], unique=False)
    op.create_table('user_profile',
    sa.Column('user_id', sa.UUID(), nullable=False, comment='User ID (also primary key)'),
    sa.Column('name', sa.Text(), nullable=False, comment='User display name'),
    sa.Column('bio', sa.Text(), nullable=True, comment='User biography'),
    sa.Column('avatar_url', sa.Text(), nullable=True, comment='URL to user avatar image'),
    sa.Column('timezone', sa.Text(), nullable=True, comment="User timezone (e.g., 'UTC', 'America/New_York')"),
    sa.Column('language', sa.Text(), nullable=False, comment='User language preference (ISO 639-1 code)'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_index('user_profile_name_idx', 'user_profile', ['name'], unique=False)
    op.create_table('user_suspensions',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False, comment='Unique suspension record ID'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='Suspended user ID'),
    sa.Column('suspended_until', sa.TIMESTAMP(timezone=True), nullable=True, comment='End date for temporary suspension (NULL = indefinite)'),
    sa.Column('reason', sa.Text(), nullable=False, comment='Reason for suspension (audit trail)'),
    sa.Column('suspended_by', sa.UUID(), nullable=False, comment='User who performed the suspension'),
    sa.Column('lifted_at', sa.TIMESTAMP(timezone=True), nullable=True, comment='When suspension was lifted (NULL = still suspended)'),
    sa.Column('lifted_by', sa.UUID(), nullable=True, comment='User who lifted the suspension'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['lifted_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['suspended_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('user_suspensions_user_id_idx', 'user_suspensions', ['user_id'], unique=False)
    op.create_table('agents',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False, comment='Project this agent belongs to'),
    sa.Column('organization_id', sa.UUID(), nullable=False, comment='Organization (denormalized from project for RLS)'),
    sa.Column('name', sa.Text(), nullable=False, comment='Agent display name'),
    sa.Column('created_by', sa.UUID(), nullable=False, comment='User who created the agent'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('agents_name_idx', 'agents', ['name'], unique=False)
    op.create_index('agents_organization_id_idx', 'agents', ['organization_id'], unique=False)
    op.create_index('agents_project_id_idx', 'agents', ['project_id'], unique=False)
    op.create_index('agents_project_name_idx', 'agents', ['project_id', 'name'], unique=False)
    op.create_table('guardrails',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False, comment='Project this guardrail belongs to'),
    sa.Column('organization_id', sa.UUID(), nullable=False, comment='Organization (denormalized from project for RLS)'),
    sa.Column('name', sa.Text(), nullable=False, comment='Guardrail display name'),
    sa.Column('definition', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='JSONB containing trigger conditions and actions'),
    sa.Column('created_by', sa.UUID(), nullable=False, comment='User who created the guardrail'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('guardrails_definition_gin_idx', 'guardrails', ['definition'], unique=False, postgresql_using='gin')
    op.create_index('guardrails_name_idx', 'guardrails', ['name'], unique=False)
    op.create_index('guardrails_organization_id_idx', 'guardrails', ['organization_id'], unique=False)
    op.create_index('guardrails_project_id_idx', 'guardrails', ['project_id'], unique=False)
    op.create_index('guardrails_project_name_idx', 'guardrails', ['project_id', 'name'], unique=False)
    op.create_table('project_active_status',
    sa.Column('project_id', sa.UUID(), nullable=False, comment='Project ID (also primary key)'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('project_id')
    )
    op.create_table('project_archives',
    sa.Column('project_id', sa.UUID(), nullable=False, comment='Archived project ID (also primary key)'),
    sa.Column('reason', sa.Text(), nullable=False, comment='Reason for archiving (audit trail)'),
    sa.Column('archived_by', sa.UUID(), nullable=False, comment='User who performed the archiving'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['archived_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('project_id')
    )
    op.create_table('project_members',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False, comment='Unique membership record ID'),
    sa.Column('project_id', sa.UUID(), nullable=False, comment='Project ID'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='Member user ID'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('project_id', 'user_id', name='project_members_unique')
    )
    op.create_index('project_members_project_id_idx', 'project_members', ['project_id'], unique=False)
    op.create_index('project_members_user_id_idx', 'project_members', ['user_id'], unique=False)
    op.create_table('project_owners',
    sa.Column('project_id', sa.UUID(), nullable=False, comment='Project ID (primary key enforces one owner)'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='Owner user ID'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('project_id')
    )
    op.create_index('project_owners_user_id_idx', 'project_owners', ['user_id'], unique=False)
    op.create_table('agent_active_status',
    sa.Column('agent_id', sa.UUID(), nullable=False, comment='Agent ID (also primary key)'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('agent_id')
    )
    op.create_table('agent_api_keys',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('agent_id', sa.UUID(), nullable=False, comment='Agent this key belongs to'),
    sa.Column('key_prefix', sa.String(length=16), nullable=False, comment='First 12-16 characters of key (for identification)'),
    sa.Column('key_hash', sa.Text(), nullable=False, comment='Bcrypt hashed full key'),
    sa.Column('name', sa.Text(), nullable=True, comment='Optional friendly name for the key'),
    sa.Column('last_used_at', sa.TIMESTAMP(timezone=True), nullable=True, comment='Timestamp of last usage'),
    sa.Column('expires_at', sa.TIMESTAMP(timezone=True), nullable=True, comment='Optional expiration date'),
    sa.Column('created_by', sa.UUID(), nullable=False, comment='User who created the key'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('key_prefix')
    )
    op.create_index('agent_api_keys_agent_id_idx', 'agent_api_keys', ['agent_id'], unique=False)
    op.create_index('agent_api_keys_expires_at_idx', 'agent_api_keys', ['expires_at'], unique=False)
    op.create_index('agent_api_keys_prefix_idx', 'agent_api_keys', ['key_prefix'], unique=True)
    op.create_table('agent_archives',
    sa.Column('agent_id', sa.UUID(), nullable=False, comment='Archived agent ID (also primary key)'),
    sa.Column('reason', sa.Text(), nullable=False, comment='Reason for archiving (audit trail)'),
    sa.Column('archived_by', sa.UUID(), nullable=False, comment='User who performed the archiving'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['archived_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('agent_id')
    )
    op.create_table('guardrail_active_status',
    sa.Column('guardrail_id', sa.UUID(), nullable=False, comment='Guardrail ID (also primary key)'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.ForeignKeyConstraint(['guardrail_id'], ['guardrails.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('guardrail_id')
    )
    op.create_table('guardrail_agent_assignments',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False, comment='Project (denormalized for RLS)'),
    sa.Column('guardrail_id', sa.UUID(), nullable=False, comment='Guardrail ID'),
    sa.Column('agent_id', sa.UUID(), nullable=False, comment='Agent ID'),
    sa.Column('assigned_by', sa.UUID(), nullable=False, comment='User who made the assignment'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['assigned_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['guardrail_id'], ['guardrails.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('guardrail_id', 'agent_id', name='guardrail_agent_assignments_unique')
    )
    op.create_index('guardrail_agent_assignments_agent_id_idx', 'guardrail_agent_assignments', ['agent_id'], unique=False)
    op.create_index('guardrail_agent_assignments_assigned_by_idx', 'guardrail_agent_assignments', ['assigned_by'], unique=False)
    op.create_index('guardrail_agent_assignments_guardrail_id_idx', 'guardrail_agent_assignments', ['guardrail_id'], unique=False)
    op.create_index('guardrail_agent_assignments_project_id_idx', 'guardrail_agent_assignments', ['project_id'], unique=False)
    op.create_table('guardrail_archives',
    sa.Column('guardrail_id', sa.UUID(), nullable=False, comment='Archived guardrail ID (also primary key)'),
    sa.Column('reason', sa.Text(), nullable=False, comment='Reason for archiving (audit trail)'),
    sa.Column('archived_by', sa.UUID(), nullable=False, comment='User who performed the archiving'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['archived_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['guardrail_id'], ['guardrails.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('guardrail_id')
    )
    op.create_table('guardrail_evaluation_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('request_id', sa.Text(), nullable=False, comment='Server-generated unique request ID'),
    sa.Column('agent_id', sa.UUID(), nullable=False, comment='Agent that made the evaluation request'),
    sa.Column('project_id', sa.UUID(), nullable=False, comment='Project the agent belongs to'),
    sa.Column('organization_id', sa.UUID(), nullable=False, comment='Organization (denormalized for RLS)'),
    sa.Column('trace_id', sa.Text(), nullable=True, comment='Optional trace ID from external tracing system'),
    sa.Column('timing', sa.Text(), nullable=False, comment='Evaluation timing: on_start or on_end'),
    sa.Column('process_type', sa.Text(), nullable=False, comment='Process type: llm, tool, retrieval, agent'),
    sa.Column('should_proceed', sa.Boolean(), nullable=False, comment='Final evaluation decision'),
    sa.Column('log_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='JSONB containing detailed evaluation data'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('request_id'),
    sa.UniqueConstraint('request_id', name='guardrail_evaluation_logs_request_id_unique')
    )
    op.create_index('guardrail_evaluation_logs_agent_id_idx', 'guardrail_evaluation_logs', ['agent_id'], unique=False)
    op.create_index('guardrail_evaluation_logs_created_at_idx', 'guardrail_evaluation_logs', ['created_at'], unique=False)
    op.create_index('guardrail_evaluation_logs_log_data_gin_idx', 'guardrail_evaluation_logs', ['log_data'], unique=False, postgresql_using='gin')
    op.create_index('guardrail_evaluation_logs_organization_id_idx', 'guardrail_evaluation_logs', ['organization_id'], unique=False)
    op.create_index('guardrail_evaluation_logs_process_type_idx', 'guardrail_evaluation_logs', ['process_type'], unique=False)
    op.create_index('guardrail_evaluation_logs_project_id_idx', 'guardrail_evaluation_logs', ['project_id'], unique=False)
    op.create_index('guardrail_evaluation_logs_request_id_idx', 'guardrail_evaluation_logs', ['request_id'], unique=False)
    op.create_index('guardrail_evaluation_logs_timing_idx', 'guardrail_evaluation_logs', ['timing'], unique=False)
    op.create_table('traces',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('agent_id', sa.UUID(), nullable=False, comment='Agent this trace belongs to'),
    sa.Column('project_id', sa.UUID(), nullable=False, comment='Project (denormalized from agent)'),
    sa.Column('organization_id', sa.UUID(), nullable=False, comment='Organization (denormalized from agent for RLS)'),
    sa.Column('status', sa.Text(), nullable=False, comment='Execution status (pending, running, completed, failed, error)'),
    sa.Column('started_at', sa.TIMESTAMP(timezone=True), nullable=False, comment='When trace execution began'),
    sa.Column('ended_at', sa.TIMESTAMP(timezone=True), nullable=True, comment='When trace execution completed (NULL = still running)'),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='JSONB containing inputs, outputs, tags, costs, errors'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('traces_agent_id_idx', 'traces', ['agent_id'], unique=False)
    op.create_index('traces_agent_started_idx', 'traces', ['agent_id', 'started_at'], unique=False)
    op.create_index('traces_ended_at_idx', 'traces', ['ended_at'], unique=False)
    op.create_index('traces_metadata_gin_idx', 'traces', ['metadata'], unique=False, postgresql_using='gin')
    op.create_index('traces_organization_id_idx', 'traces', ['organization_id'], unique=False)
    op.create_index('traces_project_id_idx', 'traces', ['project_id'], unique=False)
    op.create_index('traces_project_started_idx', 'traces', ['project_id', 'started_at'], unique=False)
    op.create_index('traces_started_at_idx', 'traces', ['started_at'], unique=False)
    op.create_index('traces_status_idx', 'traces', ['status'], unique=False)
    op.create_table('observations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('trace_id', sa.UUID(), nullable=False, comment='Trace this observation belongs to'),
    sa.Column('parent_observation_id', sa.UUID(), nullable=True, comment='Parent observation for hierarchy (NULL = root)'),
    sa.Column('type', sa.Text(), nullable=False, comment='Observation type (llm, tool, retriever, agent, embedding, custom)'),
    sa.Column('name', sa.Text(), nullable=False, comment='Display name for the observation'),
    sa.Column('status', sa.Text(), nullable=False, comment='Execution status (pending, running, completed, failed, error)'),
    sa.Column('started_at', sa.TIMESTAMP(timezone=True), nullable=False, comment='When observation began'),
    sa.Column('ended_at', sa.TIMESTAMP(timezone=True), nullable=True, comment='When observation completed (NULL = still running)'),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='JSONB containing step-specific data (tokens, cost, latency)'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['parent_observation_id'], ['observations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['trace_id'], ['traces.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('observations_metadata_gin_idx', 'observations', ['metadata'], unique=False, postgresql_using='gin')
    op.create_index('observations_parent_observation_id_idx', 'observations', ['parent_observation_id'], unique=False)
    op.create_index('observations_started_at_idx', 'observations', ['started_at'], unique=False)
    op.create_index('observations_status_idx', 'observations', ['status'], unique=False)
    op.create_index('observations_trace_id_idx', 'observations', ['trace_id'], unique=False)
    op.create_index('observations_trace_parent_idx', 'observations', ['trace_id', 'parent_observation_id'], unique=False)
    op.create_index('observations_trace_started_idx', 'observations', ['trace_id', 'started_at'], unique=False)
    op.create_index('observations_type_idx', 'observations', ['type'], unique=False)
    op.create_table('trace_archives',
    sa.Column('trace_id', sa.UUID(), nullable=False, comment='Archived trace ID (also primary key)'),
    sa.Column('reason', sa.Text(), nullable=False, comment='Reason for archiving (audit trail)'),
    sa.Column('archived_by', sa.UUID(), nullable=True, comment='User who performed the archiving (NULL for automated)'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['archived_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['trace_id'], ['traces.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('trace_id')
    )
    op.create_table('observation_archives',
    sa.Column('observation_id', sa.UUID(), nullable=False, comment='Archived observation ID (also primary key)'),
    sa.Column('reason', sa.Text(), nullable=False, comment='Reason for archiving (audit trail)'),
    sa.Column('archived_by', sa.UUID(), nullable=True, comment='User who performed the archiving (NULL for automated)'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['archived_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['observation_id'], ['observations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('observation_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('observation_archives')
    op.drop_table('trace_archives')
    op.drop_index('observations_type_idx', table_name='observations')
    op.drop_index('observations_trace_started_idx', table_name='observations')
    op.drop_index('observations_trace_parent_idx', table_name='observations')
    op.drop_index('observations_trace_id_idx', table_name='observations')
    op.drop_index('observations_status_idx', table_name='observations')
    op.drop_index('observations_started_at_idx', table_name='observations')
    op.drop_index('observations_parent_observation_id_idx', table_name='observations')
    op.drop_index('observations_metadata_gin_idx', table_name='observations', postgresql_using='gin')
    op.drop_table('observations')
    op.drop_index('traces_status_idx', table_name='traces')
    op.drop_index('traces_started_at_idx', table_name='traces')
    op.drop_index('traces_project_started_idx', table_name='traces')
    op.drop_index('traces_project_id_idx', table_name='traces')
    op.drop_index('traces_organization_id_idx', table_name='traces')
    op.drop_index('traces_metadata_gin_idx', table_name='traces', postgresql_using='gin')
    op.drop_index('traces_ended_at_idx', table_name='traces')
    op.drop_index('traces_agent_started_idx', table_name='traces')
    op.drop_index('traces_agent_id_idx', table_name='traces')
    op.drop_table('traces')
    op.drop_index('guardrail_evaluation_logs_timing_idx', table_name='guardrail_evaluation_logs')
    op.drop_index('guardrail_evaluation_logs_request_id_idx', table_name='guardrail_evaluation_logs')
    op.drop_index('guardrail_evaluation_logs_project_id_idx', table_name='guardrail_evaluation_logs')
    op.drop_index('guardrail_evaluation_logs_process_type_idx', table_name='guardrail_evaluation_logs')
    op.drop_index('guardrail_evaluation_logs_organization_id_idx', table_name='guardrail_evaluation_logs')
    op.drop_index('guardrail_evaluation_logs_log_data_gin_idx', table_name='guardrail_evaluation_logs', postgresql_using='gin')
    op.drop_index('guardrail_evaluation_logs_created_at_idx', table_name='guardrail_evaluation_logs')
    op.drop_index('guardrail_evaluation_logs_agent_id_idx', table_name='guardrail_evaluation_logs')
    op.drop_table('guardrail_evaluation_logs')
    op.drop_table('guardrail_archives')
    op.drop_index('guardrail_agent_assignments_project_id_idx', table_name='guardrail_agent_assignments')
    op.drop_index('guardrail_agent_assignments_guardrail_id_idx', table_name='guardrail_agent_assignments')
    op.drop_index('guardrail_agent_assignments_assigned_by_idx', table_name='guardrail_agent_assignments')
    op.drop_index('guardrail_agent_assignments_agent_id_idx', table_name='guardrail_agent_assignments')
    op.drop_table('guardrail_agent_assignments')
    op.drop_table('guardrail_active_status')
    op.drop_table('agent_archives')
    op.drop_index('agent_api_keys_prefix_idx', table_name='agent_api_keys')
    op.drop_index('agent_api_keys_expires_at_idx', table_name='agent_api_keys')
    op.drop_index('agent_api_keys_agent_id_idx', table_name='agent_api_keys')
    op.drop_table('agent_api_keys')
    op.drop_table('agent_active_status')
    op.drop_index('project_owners_user_id_idx', table_name='project_owners')
    op.drop_table('project_owners')
    op.drop_index('project_members_user_id_idx', table_name='project_members')
    op.drop_index('project_members_project_id_idx', table_name='project_members')
    op.drop_table('project_members')
    op.drop_table('project_archives')
    op.drop_table('project_active_status')
    op.drop_index('guardrails_project_name_idx', table_name='guardrails')
    op.drop_index('guardrails_project_id_idx', table_name='guardrails')
    op.drop_index('guardrails_organization_id_idx', table_name='guardrails')
    op.drop_index('guardrails_name_idx', table_name='guardrails')
    op.drop_index('guardrails_definition_gin_idx', table_name='guardrails', postgresql_using='gin')
    op.drop_table('guardrails')
    op.drop_index('agents_project_name_idx', table_name='agents')
    op.drop_index('agents_project_id_idx', table_name='agents')
    op.drop_index('agents_organization_id_idx', table_name='agents')
    op.drop_index('agents_name_idx', table_name='agents')
    op.drop_table('agents')
    op.drop_index('user_suspensions_user_id_idx', table_name='user_suspensions')
    op.drop_table('user_suspensions')
    op.drop_index('user_profile_name_idx', table_name='user_profile')
    op.drop_table('user_profile')
    op.drop_index('user_login_password_user_id_idx', table_name='user_login_password')
    op.drop_table('user_login_password')
    op.drop_table('user_archives')
    op.drop_table('user_active_status')
    op.drop_index('projects_organization_id_idx', table_name='projects')
    op.drop_index('projects_org_name_idx', table_name='projects')
    op.drop_index('projects_name_idx', table_name='projects')
    op.drop_index('projects_created_by_idx', table_name='projects')
    op.drop_table('projects')
    op.drop_index('organization_suspensions_org_id_idx', table_name='organization_suspensions')
    op.drop_table('organization_suspensions')
    op.drop_index('organization_owners_user_id_idx', table_name='organization_owners')
    op.drop_table('organization_owners')
    op.drop_index('organization_members_user_id_idx', table_name='organization_members')
    op.drop_index('organization_members_org_id_idx', table_name='organization_members')
    op.drop_table('organization_members')
    op.drop_table('organization_archives')
    op.drop_index('organization_admins_org_id_idx', table_name='organization_admins')
    op.drop_table('organization_admins')
    op.drop_table('organization_active_status')
    op.drop_table('users')
    op.drop_index('organizations_name_idx', table_name='organizations')
    op.drop_table('organizations')
    # ### end Alembic commands ###
