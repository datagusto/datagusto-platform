"""add_trace_observation_tables

Revision ID: eccd794afe1a
Revises: 5e808e8ad2f5
Create Date: 2025-09-30 23:47:54.943805

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'eccd794afe1a'
down_revision: Union[str, None] = '5e808e8ad2f5'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('traces',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('agent_id', sa.UUID(), nullable=False, comment='Agent this trace belongs to'),
    sa.Column('project_id', sa.UUID(), nullable=False, comment='Project (denormalized from agent)'),
    sa.Column('organization_id', sa.UUID(), nullable=False, comment='Organization (denormalized from agent for RLS)'),
    sa.Column('status', sa.Text(), nullable=False, comment='Execution status (pending, running, completed, failed, error)'),
    sa.Column('started_at', sa.TIMESTAMP(timezone=True), nullable=False, comment='When trace execution began'),
    sa.Column('ended_at', sa.TIMESTAMP(timezone=True), nullable=True, comment='When trace execution completed (NULL = still running)'),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='JSONB containing inputs, outputs, tags, costs, errors'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('traces_agent_id_idx', 'traces', ['agent_id'], unique=False)
    op.create_index('traces_agent_started_idx', 'traces', ['agent_id', 'started_at'], unique=False)
    op.create_index('traces_ended_at_idx', 'traces', ['ended_at'], unique=False)
    op.create_index('traces_metadata_gin_idx', 'traces', ['metadata'], unique=False, postgresql_using='gin')
    op.create_index('traces_organization_id_idx', 'traces', ['organization_id'], unique=False)
    op.create_index('traces_project_id_idx', 'traces', ['project_id'], unique=False)
    op.create_index('traces_project_started_idx', 'traces', ['project_id', 'started_at'], unique=False)
    op.create_index('traces_started_at_idx', 'traces', ['started_at'], unique=False)
    op.create_index('traces_status_idx', 'traces', ['status'], unique=False)
    op.create_table('observations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('trace_id', sa.UUID(), nullable=False, comment='Trace this observation belongs to'),
    sa.Column('parent_observation_id', sa.UUID(), nullable=True, comment='Parent observation for hierarchy (NULL = root)'),
    sa.Column('type', sa.Text(), nullable=False, comment='Observation type (llm, tool, retriever, agent, embedding, custom)'),
    sa.Column('name', sa.Text(), nullable=False, comment='Display name for the observation'),
    sa.Column('status', sa.Text(), nullable=False, comment='Execution status (pending, running, completed, failed, error)'),
    sa.Column('started_at', sa.TIMESTAMP(timezone=True), nullable=False, comment='When observation began'),
    sa.Column('ended_at', sa.TIMESTAMP(timezone=True), nullable=True, comment='When observation completed (NULL = still running)'),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='JSONB containing step-specific data (tokens, cost, latency)'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['parent_observation_id'], ['observations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['trace_id'], ['traces.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('observations_metadata_gin_idx', 'observations', ['metadata'], unique=False, postgresql_using='gin')
    op.create_index('observations_parent_observation_id_idx', 'observations', ['parent_observation_id'], unique=False)
    op.create_index('observations_started_at_idx', 'observations', ['started_at'], unique=False)
    op.create_index('observations_status_idx', 'observations', ['status'], unique=False)
    op.create_index('observations_trace_id_idx', 'observations', ['trace_id'], unique=False)
    op.create_index('observations_trace_parent_idx', 'observations', ['trace_id', 'parent_observation_id'], unique=False)
    op.create_index('observations_trace_started_idx', 'observations', ['trace_id', 'started_at'], unique=False)
    op.create_index('observations_type_idx', 'observations', ['type'], unique=False)
    op.create_table('trace_archives',
    sa.Column('trace_id', sa.UUID(), nullable=False, comment='Archived trace ID (also primary key)'),
    sa.Column('reason', sa.Text(), nullable=False, comment='Reason for archiving (audit trail)'),
    sa.Column('archived_by', sa.UUID(), nullable=True, comment='User who performed the archiving (NULL for automated)'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['archived_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['trace_id'], ['traces.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('trace_id')
    )
    op.create_table('observation_archives',
    sa.Column('observation_id', sa.UUID(), nullable=False, comment='Archived observation ID (also primary key)'),
    sa.Column('reason', sa.Text(), nullable=False, comment='Reason for archiving (audit trail)'),
    sa.Column('archived_by', sa.UUID(), nullable=True, comment='User who performed the archiving (NULL for automated)'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['archived_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['observation_id'], ['observations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('observation_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('observation_archives')
    op.drop_table('trace_archives')
    op.drop_index('observations_type_idx', table_name='observations')
    op.drop_index('observations_trace_started_idx', table_name='observations')
    op.drop_index('observations_trace_parent_idx', table_name='observations')
    op.drop_index('observations_trace_id_idx', table_name='observations')
    op.drop_index('observations_status_idx', table_name='observations')
    op.drop_index('observations_started_at_idx', table_name='observations')
    op.drop_index('observations_parent_observation_id_idx', table_name='observations')
    op.drop_index('observations_metadata_gin_idx', table_name='observations', postgresql_using='gin')
    op.drop_table('observations')
    op.drop_index('traces_status_idx', table_name='traces')
    op.drop_index('traces_started_at_idx', table_name='traces')
    op.drop_index('traces_project_started_idx', table_name='traces')
    op.drop_index('traces_project_id_idx', table_name='traces')
    op.drop_index('traces_organization_id_idx', table_name='traces')
    op.drop_index('traces_metadata_gin_idx', table_name='traces', postgresql_using='gin')
    op.drop_index('traces_ended_at_idx', table_name='traces')
    op.drop_index('traces_agent_started_idx', table_name='traces')
    op.drop_index('traces_agent_id_idx', table_name='traces')
    op.drop_table('traces')
    # ### end Alembic commands ###
